"use client";
import React, { useMemo, useState } from "react";

import {
  LiteralUnion,
  MaterialReactTable,
  MRT_Row,
  MRT_TableOptions,
  useMaterialReactTable,
  type MRT_ColumnDef,
} from "material-react-table";
import { Box, Button, IconButton, MenuItem, Tooltip } from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { ViewList } from "@mui/icons-material";

import { Order, PaymentStatus } from "@/app/orders/interfaces/orders-interface";
import {
  useGetOrdersQuery,
  useGetSuppliersQuery,
  useCreateOrderMutation,
  useUpdateOrderMutation,
  useDeleteOrderMutation,
} from "@/app/redux/api/inventory-api"; // Adjust the path to match your project structure

let paymentStatus = [
 'paid',
  'unpaid',
  'partially_paid'
]

const OrdersTable = () => {
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string | undefined>
  >({});
  // Fetch suppliers from the API via Redux
  const { data: response, isLoading:isSupplierLoading, isError:isSupplierError } = useGetSuppliersQuery("");

  const suppliers: Supplier[] = response ? response.data : [];

  const { data: orders, isLoading, isError } = useGetOrdersQuery();
  const [createOrder, { isLoading: orderIsLoading }] = useCreateOrderMutation();
  const [updateOrder] = useUpdateOrderMutation();
  const [deleteOrder] = useDeleteOrderMutation();

  let Orders: Order[] = orders ? orders.data : [];

  // Columns for the orders table
  const columns = useMemo<MRT_ColumnDef<Order>[]>(
    () => [
      {
        accessorKey: "orderId", // Unique order identifier
        header: "Order ID",
        enableEditing: false, // Disable editing for ID
        size: 160,
      },
      {
        accessorKey: "orderName",
        header: "Order Name",
        muiEditTextFieldProps: {
          required: true,
          error: !!validationErrors?.orderName,
          helperText: validationErrors?.orderName,
          onFocus: () =>
            setValidationErrors({ ...validationErrors, orderName: undefined }),
        },
      },
      {
        accessorKey: "supplier_id",
        header: "Supplier",
        enableHiding: true,      
        size: 150,
        muiEditTextFieldProps: {
          required: true,
          select: true,
          children: suppliers?.map((supplier) => (
            <MenuItem
              key={supplier.name}
              value={supplier.name}
            >
              {supplier?.name}
            </MenuItem>
          )),
          error: !!validationErrors?.supplier_id,
          helperText: validationErrors?.supplier_id,
          onFocus: () =>
            setValidationErrors({
              ...validationErrors,
              supplier_id: undefined,
            }),
        },
        Cell: ({ cell }) => {
          const suppliercellData = suppliers.find(
            (supplierCell) => supplierCell.supplier_id === cell.getValue()
          );
          return (
            <div>
              {suppliercellData
                ? `${suppliercellData?.name}`
                : "No Supplier Product Found"}
            </div>
          );
        },
      },
      {
        accessorKey: "totalAmount",
        header: "Total Amount",
        muiEditTextFieldProps: {
          required: true,
          error: !!validationErrors?.totalAmount,
          helperText: validationErrors?.totalAmount,
          onFocus: () =>
            setValidationErrors({
              ...validationErrors,
              totalAmount: undefined,
            }),
        },
      },
      {
        accessorKey: "paymentStatus",
        header: "Payment Status",
        muiEditTextFieldProps: {
          required: true,
          error: !!validationErrors?.paymentStatus,
          helperText: validationErrors?.paymentStatus,
          onFocus: () =>
            setValidationErrors({
              ...validationErrors,
              paymentStatus: undefined,
            }),
        },
      },
      {
        accessorKey: "paymentMethod",
        header: "Payment Method",
        muiEditTextFieldProps: {
          required: true,
          error: !!validationErrors?.paymentMethod,
          helperText: validationErrors?.paymentMethod,
          onFocus: () =>
            setValidationErrors({
              ...validationErrors,
              paymentMethod: undefined,
            }),
        },
      },
      {
        accessorKey: "shippingDate",
        header: "Shipping Date",
        size: 180,
        enableEditing: false,
      },
      {
        accessorKey: "orderDeliveryDate",
        header: "Delivery Date",
        size: 180,
        enableEditing: false,
      },
      {
        accessorKey: "orderStatus",
        header: "Order Status",
      },
      {
        accessorKey: "comments",
        header: "Comments",
      },
      {
        accessorKey: "created_at",
        header: "Created At",
        enableEditing: false,
        size: 180,
      },
      {
        accessorKey: "last_updated_at",
        header: "Updated At",
        enableEditing: false,
        size: 180,
      },
    ],
    [validationErrors]
  );

  // Handle creating an order
  const handleCreateOrder: MRT_TableOptions<Order>["onCreatingRowSave"] =
    async ({ values, table }) => {
      const newValidationErrors = validateOrder(values);
      if (Object.values(newValidationErrors).some((error) => error)) {
        setValidationErrors(newValidationErrors);
        return;
      }
      setValidationErrors({});
      await createOrder(values); // Call the create order mutation
      table.setCreatingRow(null);
    };

  // Handle updating an order
  const handleSaveOrder: MRT_TableOptions<Order>["onEditingRowSave"] = async ({
    values,
    table,
  }) => {
    const newValidationErrors = validateOrder(values);
    if (Object.values(newValidationErrors).some((error) => error)) {
      setValidationErrors(newValidationErrors);
      return;
    }
    setValidationErrors({});
    await updateOrder(values); // Update order via API
    table.setEditingRow(null);
  };

  // Handle deleting an order
  const openDeleteConfirmModal = (row: MRT_Row<Order>) => {
    if (window.confirm("Are you sure you want to delete this order?")) {
      deleteOrder(row.original.orderId); // Delete order by ID
    }
  };

  const table = useMaterialReactTable({
    columns,
    data: Orders || [],
    createDisplayMode: "row",
    editDisplayMode: "row",
    enableEditing: true,
    getRowId: (row) => row.orderId, // Ensure row has a unique id
    onCreatingRowCancel: () => setValidationErrors({}),
    onCreatingRowSave: handleCreateOrder,
    onEditingRowCancel: () => setValidationErrors({}),
    onEditingRowSave: handleSaveOrder,
    renderRowActions: ({ row, table }) => (
      <Box sx={{ display: "flex", gap: "1rem" }}>
        <Tooltip title="Edit">
          <IconButton onClick={() => table.setEditingRow(row)}>
            <EditIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Delete">
          <IconButton color="error" onClick={() => openDeleteConfirmModal(row)}>
            <DeleteIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="view-order-products">
          <IconButton
            color="primary"
            onClick={() => openDeleteConfirmModal(row)}
          >
            <ViewList />
          </IconButton>
        </Tooltip>
      </Box>
    ),
    renderTopToolbarCustomActions: ({ table }) => (
      <Button
        variant="contained"
        onClick={() => {
          table.setCreatingRow(true); // Open the create row modal
        }}
      >
        Create New Order
      </Button>
    ),
    state: {
      isLoading, // Use loading state from the query
      isSaving: false,
      showAlertBanner: false,
      showProgressBars: false,
    },
  });

  return <MaterialReactTable table={table} />;
};

// Validation function for order (you can extend this)
const validateOrder = (
  order: Record<
    LiteralUnion<
      | "orderId"
      | "orderName"
      | "totalAmount"
      | "paymentStatus"
      | "paymentMethod"
      | "shippingDate"
      | "orderDeliveryDate"
      | "orderStatus"
      | "comments"
      | "created_at"
      | "last_updated_at",
      string
    >,
    any
  >
) => {
  return {
    orderName: !order.orderName ? "Order Name is Required" : "",
    totalAmount: !order.totalAmount ? "Total Amount is Required" : "",
    paymentStatus: !order.paymentStatus ? "Payment Status is Required" : "",
    paymentMethod: !order.paymentMethod ? "Payment Method is Required" : "",
  };
};

export default OrdersTable;
