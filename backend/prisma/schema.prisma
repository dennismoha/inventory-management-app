// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Categories {
//   categoryId     String   @id @default(uuid()) @db.Uuid
//   category_slug  String   @unique
//   category_name  String   @unique
//   description    String
//   created_at     DateTime @default(now()) @db.Timestamp(6)
//   updated_at     DateTime @updatedAt @db.Timestamp(6)
//   SubCategories  SubCategories[]
//   Products       Products[]

//   @@map("Categories")
// }

// model SubCategories {
//   subcategory_id   String      @id @default(uuid()) @db.Uuid
//   subcategory_name String      
//   category_id      String      @db.Uuid 
//   description      String
//   created_at       DateTime    @default(now()) @db.Timestamp(6)
//   updated_at       DateTime    @updatedAt @db.Timestamp(6)
//   category         Categories  @relation(fields: [category_id], references: [categoryId])
//   Products         Products[]

//   // Add composite unique constraint
//   @@unique([category_id, subcategory_name])  // Ensures unique combinations of category_id and subcategory_name
//   @@map("SubCategories")
// }

model Categories {
  categoryId    String                @id @default(uuid()) @db.Uuid
  category_slug String                @unique
  category_name String                @unique
  description   String
  created_at    DateTime              @default(now()) @db.Timestamp(6)
  updated_at    DateTime              @updatedAt @db.Timestamp(6)
  SubCategories CategorySubCategory[] // Many-to-many relationship
  Products      Products[]

  @@map("Categories")
}

model SubCategories {
  subcategory_id   String                @id @default(uuid()) @db.Uuid
  subcategory_name String                @unique
  description      String
  created_at       DateTime              @default(now()) @db.Timestamp(6)
  updated_at       DateTime              @updatedAt @db.Timestamp(6)
  Categories       CategorySubCategory[] // Many-to-many relationship
  Products         Products[]

  @@map("SubCategories")
}

// Pivot table for the many-to-many relationship between Categories and SubCategories
model CategorySubCategory {
  category_subcategory_id String   @default(uuid()) @db.Uuid
  category_id             String   @db.Uuid
  subcategory_id          String   @db.Uuid
  created_at              DateTime @default(now()) @db.Timestamp(6)

  category    Categories    @relation(fields: [category_id], references: [categoryId])
  subcategory SubCategories @relation(fields: [subcategory_id], references: [subcategory_id])

  @@id([category_id, subcategory_id]) // Composite primary key for the pivot table
  @@map("CategorySubCategory")
}

model SupplierPricing {
  supplier_pricing     String           @id @default(uuid()) @db.Uuid
  supplier_products_id String           @db.Uuid
  Quantity             Decimal          @db.Decimal(8, 2)
  unit_id              String           @db.Uuid
  price                Decimal          @db.Decimal(8, 2)
  effective_date       DateTime         @db.Date
  created_at           DateTime         @default(now()) @db.Timestamp(6)
  updated_at           DateTime         @updatedAt @db.Timestamp(6)
  supplierProduct      SupplierProducts @relation(fields: [supplier_products_id], references: [supplier_products_id])
  unit                 Units            @relation(fields: [unit_id], references: [unit_id])
  OrderProducts        OrderProducts[]

  @@map("SupplierPricing")
}

model ProductUnits {
  product_unit_id String   @id @default(uuid()) @db.Uuid
  product_id      String   @db.Uuid
  unit_id         String   @db.Uuid
  product         Products @relation(fields: [product_id], references: [product_id])
  unit            Units    @relation(fields: [unit_id], references: [unit_id])

  @@map("ProductUnits")
}

model Units {
  unit_id         String            @id @default(uuid()) @db.Uuid
  unit            String            @unique
  short_name      String            @unique
  no_of_products  Int
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @updatedAt @db.Timestamp(6)
  ProductUnits    ProductUnits[]
  SupplierPricing SupplierPricing[]
  OrderProducts   OrderProducts[]
  Inventory       Inventory[]
  ProductPricing  ProductPricing[]

  @@unique([unit, short_name], name: "unit_short_name")
  @@map("Units")
}

model SupplierProducts {
  supplier_products_id String            @id @default(uuid()) @db.Uuid
  supplier_id          String            @db.Uuid
  product_id           String            @db.Uuid
  created_at           DateTime          @default(now()) @db.Timestamp(6)
  updated_at           DateTime          @updatedAt @db.Timestamp(6)
  supplier             Suppliers         @relation(fields: [supplier_id], references: [supplier_id])
  product              Products          @relation(fields: [product_id], references: [product_id])
  SupplierPricing      SupplierPricing[]
  Inventory            Inventory?
  ProductPricing       ProductPricing?

  transactionProducts TransactionProduct[]

  @@unique([supplier_id, product_id]) // Enforcing uniqueness on supplier_id and product_id combination
  @@map("SupplierProducts")
}

model Products {
  product_id       String             @id @default(uuid()) @db.Uuid
  name             String
  description      String
  category_id      String             @db.Uuid
  subcategory_id   String             @db.Uuid
  image_url        String
  sku              String             @unique
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @updatedAt @db.Timestamp(6)
  category         Categories         @relation(fields: [category_id], references: [categoryId])
  subcategory      SubCategories      @relation(fields: [subcategory_id], references: [subcategory_id])
  ProductUnits     ProductUnits[]
  SupplierProducts SupplierProducts[]
  OrderProducts    OrderProducts[]

  @@map("Products")
}

model Suppliers {
  supplier_id      String             @id @default(uuid()) @db.Uuid
  name             String             @unique
  address          String
  contact          String
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @updatedAt @db.Timestamp(6)
  SupplierProducts SupplierProducts[]
  Order            Order[]

  @@map("Suppliers")
}

model Order {
  supplier_id       String        @db.Uuid
  orderId           String        @id @default(uuid()) @db.Uuid
  orderName         String        @unique
  totalAmount       Decimal       @db.Decimal(10, 2)
  paymentStatus     PaymentStatus
  paymentMethod     PaymentMethod
  orderDate         DateTime
  shippingDate      DateTime
  orderDeliveryDate DateTime
  orderStatus       OrderStatus   @default(empty)
  comments          String?
  supplierDetails   String?
  receiptPictorials String?
  receiptText       String?
  created_at        DateTime      @default(now())
  last_updated_at   DateTime      @updatedAt

  // Relations
  supplier      Suppliers       @relation(fields: [supplier_id], references: [supplier_id])
  miscellaneous Miscellaneous?
  orderProducts OrderProducts[]
}

model Miscellaneous {
  miscellaneous_id       String   @id @default(uuid()) @db.Uuid
  order_id               String   @unique @db.Uuid
  base_fare              Decimal  @db.Decimal(10, 2)
  discount_amount        Decimal  @default(0) @db.Decimal(10, 2)
  additional_charges     Decimal  @default(0) @db.Decimal(10, 2)
  tax_amount             Decimal  @db.Decimal(10, 2)
  shipping_charge        Decimal  @db.Decimal(10, 2)
  payment_processing_fee Decimal  @default(0) @db.Decimal(10, 2)
  total_order_value      Decimal  @db.Decimal(10, 2)
  currency_code          String   @db.VarChar(3)
  fare_breakdown         Json?
  tip_amount             Decimal  @default(0) @db.Decimal(10, 2)
  refund_amount          Decimal  @default(0) @db.Decimal(10, 2)
  other_fees             Decimal  @default(0) @db.Decimal(10, 2)
  payment_status         String   @db.VarChar(20)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  notes                  String

  // Relations
  order Order @relation(fields: [order_id], references: [orderId])
}

model OrderProducts {
  orderProductsId           String  @id @default(uuid())
  orderId                   String  @db.Uuid
  productId                 String  @db.Uuid
  productName               String
  quantity                  Int
  order_quantity            Int
  price_per_unit            Decimal @db.Decimal(10, 2)
  unit_id                   String  @db.Uuid
  totalAmount               Decimal @db.Decimal(10, 2)
  supplierProductsPricingId String  @db.Uuid

  // Relations
  order             Order               @relation(fields: [orderId], references: [orderId])
  supplierPricing   SupplierPricing     @relation(fields: [supplierProductsPricingId], references: [supplier_pricing])
  products          Products            @relation(fields: [productId], references: [product_id])
  units             Units               @relation(fields: [unit_id], references: [unit_id])
  inventoryTracking InventoryTracking[]
}

model Inventory {
  inventoryId          String           @id @default(uuid())
  supplier_products_id String           @unique @db.Uuid
  // productName           String
  // sku                   String
  product_weight       Decimal          @db.Decimal(8, 2)
  stock_quantity       Decimal          @db.Decimal(8, 2)
  reorder_level        Int
  last_restocked       DateTime
  unit_id              String           @db.Uuid
  created_at           DateTime         @default(now()) @db.Timestamp(6)
  updated_at           DateTime         @updatedAt @db.Timestamp(6)
  // Soft delete flag to mark an inventory item as deleted without actually removing it from the database.
  softDelete           Boolean          @default(false)
  // Status to indicate whether the inventory item is active, inactive, or discontinued.
  status               InventoryStatus  @default(ACTIVE)
  // Relations
  supplierProduct      SupplierProducts @relation(fields: [supplier_products_id], references: [supplier_products_id])
  unit                 Units            @relation(fields: [unit_id], references: [unit_id])
   TransactionProduct TransactionProduct[]
  // `last_restocked` is the timestamp when new stock was last added to the inventory. 
  // It is updated whenever stock_quantity is restocked, e.g., when new products are received from the supplier.

  // `updated_at` is the timestamp when any update occurs to the inventory record. 
  // This field will be updated on any modification of the inventory item, 
  // including when stock levels are adjusted (due to sales, stock adjustments, etc.), 
  // price updates, or status changes.
}

model ProductPricing {
  product_pricing_id   String           @id @default(uuid())
  supplier_products_id String           @unique @db.Uuid
  Quantity             Decimal          @db.Decimal(8, 2)
  unit_id              String           @db.Uuid
  price                Decimal          @db.Decimal(8, 2)
  VAT                  Decimal?         @db.Decimal(8, 2)
  discount             Decimal?         @db.Decimal(8, 2)
  effective_date       DateTime         @updatedAt @db.Timestamp(6)
  created_at           DateTime         @default(now()) @db.Timestamp(6)
  updated_at           DateTime         @updatedAt @db.Timestamp(6)
  supplierProduct      SupplierProducts @relation(fields: [supplier_products_id], references: [supplier_products_id])
  unit                 Units            @relation(fields: [unit_id], references: [unit_id])
}

model InventoryTracking {
  inventoryTrackingId String   @id @default(uuid())
  productID           String
  orderProductId      String
  quantityDeducted    Int
  dateDeducted        DateTime @default(now())
  notes               String?

  // Relations
  orderProduct OrderProducts @relation(fields: [orderProductId], references: [orderProductsId])
}

model Customer {
  customerId  String  @id @default(uuid()) // Unique ID for each customer
  firstName   String // Customer's first name
  lastName    String // Customer's last name
  email       String  @unique // Optional: Customer's email address
  phoneNumber String  @unique // Optional: Customer's phone number
  address     String? // Optional: Customer's address

  country                String? // Optional: Customer's country
  createdAt              DateTime @default(now()) // Date when the customer was added
  updatedAt              DateTime @updatedAt // Automatically updates when customer details change
  status                 String // Customer status: "active", "inactive", etc.
  loyaltyPoints          Int      @default(0) // Optional: Loyalty points, if applicable
  totalSpent             Float    @default(0) // Total amount the customer has spent (optional)
  deleted                Boolean  @default(false)
  notes                  String? // Optional: Any special notes or preferences about the customer
  preferredPaymentMethod String? // Optional: Preferred payment method (e.g., Credit card, PayPal)

  // Relationship with transactions
  transactions Transaction[] // A customer can have many transactions

  @@index([email], name: "customer_email_idx") // Index for email for quick searches
}

model Transaction {
  Id                     Int           @id @default(autoincrement()) // Unique identifier for the transaction in autoincrement form
  transactionId          String        @unique // Unique identifier for the transaction
  // VAT applied to the product
  customerId             String? // Optional: Customer ID if applicable
  transactionDateCreated DateTime      @default(now()) // Timestamp for when the transaction was created
  totalCost              Float // Total cost after applying discounts and VAT
  paymentMethod          PaymentMethod // Payment method (e.g., card, PayPal, cash)
  subtotal               Float // Subtotal (price * quantity)

  // Relationships
  
  customer        Customer?        @relation(fields: [customerId], references: [customerId]) // Link to the customer (nullable)

  // Optional: Indexes for faster querying
  TransactionProduct TransactionProduct[]

  @@index([customerId])
}

model TransactionProduct {
  TransactionProductId               String  @id @default(uuid()) 
  supplier_products_id String      @db.Uuid
  inventoryId String
  // unit String
  stock_quantity Decimal
  quantity          Int
  productName       String
  price             Float
  discount          Float
  VAT               Float
  // totalCost       Float
  productSubTotalCost Float
  productTotalCost Float
  transactionId     String
  createdAt              DateTime @default(now()) // Date when the customer was added
  InventoryItemID   Inventory? @relation(fields: [inventoryId], references: [inventoryId])
  supplierProduct SupplierProducts @relation(fields: [supplier_products_id], references: [supplier_products_id]) // Link to supplier product
  transaction       Transaction @relation(fields: [transactionId], references: [transactionId])
}

model User {
  user_id  String    @id @default(uuid())
  username String
  email    String    @unique
  password String
  role     UserRoles
}

// user roles
enum UserRoles {
  admin
  user
}

// Enums for payment status, payment method, and order status
enum PaymentStatus {
  paid
  unpaid
  partially_paid
}

enum PaymentMethod {
  cash
  bank
  credit
}

enum OrderStatus {
  pending
  empty
  failed
  fulfilled
  extended
  order_default
}

// Enum to represent the possible statuses of the inventory item
enum InventoryStatus {
  ACTIVE // Item is available for sale and can be interacted with.
  INACTIVE // Item is temporarily unavailable for sale, could be out of stock or on hold.
  DISCONTINUED // Item is no longer available for sale and will not be restocked.
}
