name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - deployment-setup  # Trigger deployment on changes to the main branch
    paths:
      - "backend/**"  # Only trigger if files in the backend folder are changed
  pull_request:
    branches:
      - "main"
    paths:
      - "backend/**"  # Only trigger if files in the backend folder are changed

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Use Node.js version 20

      - name: Install dependencies
        working-directory: ./backend  # Run npm install in the backend directory
        run: npm install

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend  # Ensure npm install is run in the backend folder
        run: npm install

      - name: Run ESLint check
        working-directory: ./backend  # Run ESLint in the backend folder
        run: npm run lint:check

      - name: Run Prettier check
        working-directory: ./backend  # Run Prettier in the backend folder
        run: npm run prettier:check

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend  # Ensure npm install is run in the backend folder
        run: npm install

      - name: Build project
        working-directory: ./backend  # Run the build command in the backend folder
        run: npm run build

  migrate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend  # Ensure npm install is run in the backend folder
        run: npm install

      - name: Run migration (production)
        working-directory: ./backend  # Run migration in the backend folder
        run: npm run migrate:prod
        env:       
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend  # Ensure npm install is run in the backend folder
        run: npm install

      - name: Run tests
        working-directory: ./backend  # Run tests in the backend folder
        run: echo "test"

  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend  # Ensure npm install is run in the backend folder
        run: npm install
      
      - name: Set DATABASE_URL for migration
        env:         
          DATABASE_URL: ${{secrets.DATABASE_URL}}
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> .env  # Ensure the Prisma schema can use it

      - name: Run migration (production)
        working-directory: ./backend  # Run migration in the backend folder
        run: npm run migrate:prod
        env:        
          DATABASE_URL: ${{secrets.DATABASE_URL}}
      - name : Deploying phase
        run : echo "starting to deploy"
      
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
          api-key: ${{ secrets.MY_RENDER_API_KEY }}
          wait-for-success: true
         
    

